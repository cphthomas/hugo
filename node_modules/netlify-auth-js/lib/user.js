'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _microApiClient = require('micro-api-client');

var _microApiClient2 = _interopRequireDefault(_microApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ExpiryMargin = 60 * 1000;
var storageKey = "netlify.auth.user";
var currentUser = null;

var User = function () {
  function User(api, tokenResponse) {
    _classCallCheck(this, User);

    this.api = api;
    this.processTokenResponse(tokenResponse);
  }

  _createClass(User, [{
    key: 'update',
    value: function update(attributes) {
      var _this = this;

      return this.request('/user', {
        method: 'PUT',
        body: JSON.stringify(attributes)
      }).then(function (response) {
        for (var key in response) {
          _this[key] = response[key];
        }
        return _this;
      });
    }
  }, {
    key: 'jwt',
    value: function jwt() {
      var _this2 = this;

      var _tokenDetails = this.tokenDetails(),
          jwt_expiry = _tokenDetails.jwt_expiry,
          refreshToken = _tokenDetails.refreshToken,
          jwt_token = _tokenDetails.jwt_token;

      if (jwt_expiry - ExpiryMargin < new Date().getTime()) {
        return this.api.request('/token', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: 'grant_type=refresh_token&refresh_token=' + refreshToken
        }).then(function (response) {
          _this2.processTokenResponse(response);
          _this2.refreshPersistedSession(_this2);
          return _this2.jwt_token;
        }).catch(function (error) {
          console.error('failed to refresh token: %o', error);
          _this2.persistSession(null);
          _this2.jwt_expiry = _this2.refreshToken = _this2.jwt_token = null;
          return Promise.reject(error);
        });
      }
      return Promise.resolve(jwt_token);
    }
  }, {
    key: 'logout',
    value: function logout() {
      return this.request('/logout', { method: 'POST' }).then(this.clearSession.bind(this)).catch(this.clearSession.bind(this));
    }
  }, {
    key: 'request',
    value: function request(path, options) {
      var _this3 = this;

      return this.jwt().then(function (token) {
        return _this3.api.request(path, _extends({
          headers: { Authorization: 'Bearer ' + token }
        }, options));
      });
    }
  }, {
    key: 'reload',
    value: function reload() {
      return this.request('/user').then(this.process.bind(this)).then(this.refreshPersistedSession.bind(this));
    }
  }, {
    key: 'process',
    value: function process(attributes) {
      for (var key in attributes) {
        if (key in User.prototype || key == 'api') {
          continue;
        }
        this[key] = attributes[key];
      }
      return this;
    }
  }, {
    key: 'processTokenResponse',
    value: function processTokenResponse(tokenResponse) {
      var now = new Date();
      this.tokenResponse = tokenResponse;
      this.refreshToken = tokenResponse.refresh_token;
      this.jwt_token = tokenResponse.access_token;
      now.setTime(now.getTime() + tokenResponse.expires_in * 1000);
      this.jwt_expiry = now.getTime();
    }
  }, {
    key: 'refreshPersistedSession',
    value: function refreshPersistedSession(user) {
      currentUser = user;
      if (localStorage.getItem(storageKey)) {
        this.persistSession(user);
      }
      return user;
    }
  }, {
    key: 'persistSession',
    value: function persistSession(user) {
      currentUser = user;
      if (user) {
        localStorage.setItem(storageKey, JSON.stringify(user));
      } else {
        localStorage.removeItem(storageKey);
      }
      return user;
    }
  }, {
    key: 'tokenDetails',
    value: function tokenDetails() {
      var fromStorage = localStorage.getItem(storageKey);
      if (fromStorage) {
        return JSON.parse(fromStorage);
      }
      return {
        expires_in: this.expires_in,
        refreshToken: this.refreshToken,
        jwt_token: this.jwt_token
      };
    }
  }, {
    key: 'clearSession',
    value: function clearSession() {
      localStorage.removeItem(storageKey);
    }
  }], [{
    key: 'recoverSession',
    value: function recoverSession() {
      if (currentUser) {
        return currentUser;
      }

      var json = localStorage.getItem(storageKey);
      if (json) {
        var data = JSON.parse(json);
        return new User(new _microApiClient2.default(data.api.apiURL), data.tokenResponse).process(data);
      }

      return null;
    }
  }]);

  return User;
}();

exports.default = User;