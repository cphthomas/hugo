'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _microApiClient = require('micro-api-client');

var _microApiClient2 = _interopRequireDefault(_microApiClient);

var _user = require('./user');

var _user2 = _interopRequireDefault(_user);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HTTPRegexp = /^http:\/\//;

var NetlifyAuth = function () {
  function NetlifyAuth() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NetlifyAuth);

    if (!options.APIUrl) {
      throw "You must specify an APIUrl of your Netlify Auth instance";
    }
    if (options.APIUrl.match(HTTPRegexp)) {
      console.log('Warning:\n\nDO NOT USE HTTP IN PRODUCTION FOR NETLIFY AUTH EVER!\nNetlify Auth REQUIRES HTTPS to work securely.');
    }
    this.api = new _microApiClient2.default(options.APIUrl);
  }

  _createClass(NetlifyAuth, [{
    key: 'signup',
    value: function signup(email, password, data) {
      return this.api.request('/signup', {
        method: 'POST',
        body: JSON.stringify({ email: email, password: password, data: data })
      });
    }
  }, {
    key: 'login',
    value: function login(email, password, remember) {
      var _this = this;

      return this.api.request('/token', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: 'grant_type=password&username=' + encodeURIComponent(email) + '&password=' + encodeURIComponent(password)
      }).then(function (response) {
        var user = new _user2.default(_this.api, response);
        user.persistSession(null);
        return user.reload();
      }).then(function (user) {
        if (remember) {
          user.persistSession(user);
        }
        return user;
      });
    }
  }, {
    key: 'confirm',
    value: function confirm(token) {
      return this.verify('signup', token);
    }
  }, {
    key: 'requestPasswordRecovery',
    value: function requestPasswordRecovery(email) {
      return this.api.request('/recover', {
        method: 'POST',
        body: JSON.stringify({ email: email })
      });
    }
  }, {
    key: 'recover',
    value: function recover(token) {
      return this.verify('recovery', token);
    }
  }, {
    key: 'user',
    value: function user(tokenResponse) {
      return new _user2.default(this.api, tokenResponse);
    }
  }, {
    key: 'currentUser',
    value: function currentUser() {
      return _user2.default.recoverSession();
    }
  }, {
    key: 'verify',
    value: function verify(type, token) {
      var _this2 = this;

      return this.api.request('/verify', {
        method: 'POST',
        body: JSON.stringify({ token: token, type: type })
      }).then(function (response) {
        return new _user2.default(_this2.api, response).reload();
      });
    }
  }]);

  return NetlifyAuth;
}();

exports.default = NetlifyAuth;


if (typeof window !== "undefined") {
  window.NetlifyAuth = NetlifyAuth;
}