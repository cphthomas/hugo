// ::- Superclass for editor selections.
var Selection = function Selection($from, $to) {
  // :: ResolvedPos
  // The resolved lower bound of the selection
  this.$from = $from
  // :: ResolvedPos
  // The resolved upper bound of the selection
  this.$to = $to
};

var prototypeAccessors = { from: {},to: {},empty: {} };

// :: bool
// True if the selection is an empty text selection (head an anchor
// are the same).
prototypeAccessors.from.get = function () { return this.$from.pos };

// :: number
// The upper bound of the selection.
prototypeAccessors.to.get = function () { return this.$to.pos };

prototypeAccessors.empty.get = function () {
  return this.from == this.to
};

// :: (?Object) → SelectionAction
// Create an [action](#state.Action) that updates the selection to
// this one.
Selection.prototype.action = function action (options) {
  var action = {type: "selection", selection: this, time: Date.now()}
  if (options) { for (var prop in options) { action[prop] = options[prop] } }
  return action
};

// :: () → SelectionAction
// Create an action that updates the selection to this one and
// scrolls it into view.
Selection.prototype.scrollAction = function scrollAction () {
  return this.action({scrollIntoView: true})
};

// eq:: (other: Selection) → bool
// Test whether the selection is the same as another selection.

// map:: (doc: Node, mapping: Mappable) → Selection
// Map this selection through a [mappable](#transform.Mappable) thing. `doc`
// should be the new document, to which we are mapping.

// toJSON:: () → Object
// Convert the selection to a JSON representation.

// :: (ResolvedPos, number, ?bool) → ?Selection
// Find a valid cursor or leaf node selection starting at the given
// position and searching back if `dir` is negative, and forward if
// negative. When `textOnly` is true, only consider cursor
// selections.
Selection.findFrom = function findFrom ($pos, dir, textOnly) {
  var inner = $pos.parent.isTextblock ? new TextSelection($pos)
      : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)
  if (inner) { return inner }

  for (var depth = $pos.depth - 1; depth >= 0; depth--) {
    var found = dir < 0
        ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)
        : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)
    if (found) { return found }
  }
};

// :: (ResolvedPos, ?number, ?bool) → Selection
// Find a valid cursor or leaf node selection near the given
// position. Searches forward first by default, but if `bias` is
// negative, it will search backwards first.
Selection.near = function near ($pos, bias) {
    if ( bias === void 0 ) bias = 1;

  var result = this.findFrom($pos, bias) || this.findFrom($pos, -bias)
  if (!result) { throw new RangeError("Searching for selection in invalid document " + $pos.node(0)) }
  return result
};

// :: (Node, ?bool) → ?Selection
// Find the cursor or leaf node selection closest to the start of
// the given document. When `textOnly` is true, only consider cursor
// selections.
Selection.atStart = function atStart (doc, textOnly) {
  return findSelectionIn(doc, doc, 0, 0, 1, textOnly)
};

// :: (Node, ?bool) → ?Selection
// Find the cursor or leaf node selection closest to the end of
// the given document. When `textOnly` is true, only consider cursor
// selections.
Selection.atEnd = function atEnd (doc, textOnly) {
  return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1, textOnly)
};

// :: (ResolvedPos, ResolvedPos, ?number) → Selection
// Find a selection that spans the given positions, if both are text
// positions. If not, return some other selection nearby, where
// `bias` determines whether the method searches forward (default)
// or backwards (negative number) first.
Selection.between = function between ($anchor, $head, bias) {
  var found = Selection.near($head, bias)
  if (found instanceof TextSelection) {
    var nearAnchor = Selection.findFrom($anchor, $anchor.pos > found.to ? -1 : 1, true)
    found = new TextSelection(nearAnchor.$anchor, found.$head)
  } else if ($anchor.pos < found.from || $anchor.pos > found.to) {
    // If head falls on a node, but anchor falls outside of it, create
    // a text selection between them
    var inv = $anchor.pos > found.to
    var foundAnchor = Selection.findFrom($anchor, inv ? -1 : 1, true)
    var foundHead = Selection.findFrom(inv ? found.$from : found.$to, inv ? 1 : -1, true)
    if (foundAnchor && foundHead)
      { found = new TextSelection(foundAnchor.$anchor, foundHead.$head) }
  }
  return found
};

Selection.mapJSON = function mapJSON (json, mapping) {
  if (json.anchor != null)
    { return {head: mapping.map(json.head), anchor: mapping.map(json.anchor)} }
  else
    { return {node: mapping.map(json.node), after: mapping.map(json.after, -1)} }
};

// :: (Node, Object) → Selection
// Deserialize a JSON representation of a selection.
Selection.fromJSON = function fromJSON (doc, json) {
  // This is cautious, because the history will blindly map
  // selections and then try to deserialize them, and the endpoints
  // might not point at appropriate positions anymore (though they
  // are guaranteed to be inside of the document's range).
  if (json.head != null) {
    var $anchor = doc.resolve(json.anchor), $head = doc.resolve(json.head)
    if ($anchor.parent.isTextblock && $head.parent.isTextblock) { return new TextSelection($anchor, $head) }
    else { return Selection.between($anchor, $head) }
  } else {
    var $pos = doc.resolve(json.node), after = $pos.nodeAfter
    if (after && json.after == json.pos + after.nodeSize && NodeSelection.isSelectable(after)) { return new NodeSelection($pos) }
    else { return Selection.near($pos) }
  }
};

Object.defineProperties( Selection.prototype, prototypeAccessors );
exports.Selection = Selection

// ::- A text selection represents a classical editor
// selection, with a head (the moving side) and anchor (immobile
// side), both of which point into textblock nodes. It can be empty (a
// regular cursor position).
var TextSelection = (function (Selection) {
  function TextSelection($anchor, $head) {
    if ( $head === void 0 ) $head = $anchor;

    var inv = $anchor.pos > $head.pos
    Selection.call(this, inv ? $head : $anchor, inv ? $anchor : $head)
    // :: ResolvedPos The resolved anchor of the selection.
    this.$anchor = $anchor
    // :: ResolvedPos The resolved head of the selection.
    this.$head = $head
  }

  if ( Selection ) TextSelection.__proto__ = Selection;
  TextSelection.prototype = Object.create( Selection && Selection.prototype );
  TextSelection.prototype.constructor = TextSelection;

  var prototypeAccessors$1 = { anchor: {},head: {},inverted: {} };

  prototypeAccessors$1.anchor.get = function () { return this.$anchor.pos };
  // :: number
  // The selection's mobile side (the side that moves when pressing
  // shift-arrow).
  prototypeAccessors$1.head.get = function () { return this.$head.pos };

  prototypeAccessors$1.inverted.get = function () { return this.anchor > this.head };

  TextSelection.prototype.eq = function eq (other) {
    return other instanceof TextSelection && other.head == this.head && other.anchor == this.anchor
  };

  TextSelection.prototype.map = function map (doc, mapping) {
    var $head = doc.resolve(mapping.map(this.head))
    if (!$head.parent.isTextblock) { return Selection.near($head) }
    var $anchor = doc.resolve(mapping.map(this.anchor))
    return new TextSelection($anchor.parent.isTextblock ? $anchor : $head, $head)
  };

  TextSelection.prototype.toJSON = function toJSON () {
    return {head: this.head, anchor: this.anchor}
  };

  // :: (Node, number, ?number) → TextSelection
  // Create a text selection from non-resolved positions.
  TextSelection.create = function create (doc, anchor, head) {
    if ( head === void 0 ) head = anchor;

    var $anchor = doc.resolve(anchor)
    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))
  };

  Object.defineProperties( TextSelection.prototype, prototypeAccessors$1 );

  return TextSelection;
}(Selection));
exports.TextSelection = TextSelection

// ::- A node selection is a selection that points at a
// single node. All nodes marked [selectable](#model.NodeSpec.selectable)
// can be the target of a node selection. In such an object, `from`
// and `to` point directly before and after the selected node.
var NodeSelection = (function (Selection) {
  function NodeSelection($from) {
    var $to = $from.node(0).resolve($from.pos + $from.nodeAfter.nodeSize)
    Selection.call(this, $from, $to)
    // :: Node The selected node.
    this.node = $from.nodeAfter
  }

  if ( Selection ) NodeSelection.__proto__ = Selection;
  NodeSelection.prototype = Object.create( Selection && Selection.prototype );
  NodeSelection.prototype.constructor = NodeSelection;

  NodeSelection.prototype.eq = function eq (other) {
    return other instanceof NodeSelection && this.from == other.from
  };

  NodeSelection.prototype.map = function map (doc, mapping) {
    var from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)
    var $from = doc.resolve(from.pos), node = $from.nodeAfter
    if (!from.deleted && !to.deleted && node && to.pos == from.pos + node.nodeSize && NodeSelection.isSelectable(node))
      { return new NodeSelection($from) }
    return Selection.near($from)
  };

  NodeSelection.prototype.toJSON = function toJSON () {
    return {node: this.from, after: this.to}
  };

  // :: (Node, number, ?number) → TextSelection
  // Create a node selection from non-resolved positions.
  NodeSelection.create = function create (doc, from) {
    return new this(doc.resolve(from))
  };

  // :: (Node) → bool
  // Determines whether the given node may be selected as a node
  // selection.
  NodeSelection.isSelectable = function isSelectable (node) {
    return !node.isText && node.type.spec.selectable !== false
  };

  return NodeSelection;
}(Selection));
exports.NodeSelection = NodeSelection

// FIXME we'll need some awareness of text direction when scanning for selections

// Try to find a selection inside the given node. `pos` points at the
// position where the search starts. When `text` is true, only return
// text selections.
function findSelectionIn(doc, node, pos, index, dir, text) {
  if (node.isTextblock) { return TextSelection.create(doc, pos) }
  for (var i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
    var child = node.child(i)
    if (!child.isLeaf) {
      var inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)
      if (inner) { return inner }
    } else if (!text && NodeSelection.isSelectable(child)) {
      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))
    }
    pos += child.nodeSize * dir
  }
}
